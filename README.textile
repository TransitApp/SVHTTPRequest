**Important migration note**: the completion block format is now @(id, NSHTTPURLResponse*, NSError*)@ (was @(id, NSError*)@). This new format imitiates what Apple does with TWRequest, and allows for testing against particular HTTP response codes.__

h1. SVHTTPRequest

SVHTTPRequest is a simple and extremely straightforward way to communicate with RESTful web APIs for iOS and Mac. It's a simpler and cleaner alternative to bulky "ASIHTTPRequest":https://github.com/pokeb/asi-http-request/tree, "AFNetworking":https://github.com/AFNetworking/AFNetworking and "RESTKit":https://github.com/RestKit/RestKit. It is blocked-based, uses @NSURLConnection@, ARC, as well as @NSJSONSerialization@ to automatically parse JSON responses (making it only compatible with iOS 5 and Mac OS X Lion).

**SVHTTPRequest features:**

* straightforward singleton convenience methods for making @GET@, @POST@, @PUT@, @DELETE@, @HEAD@ and download requests.
* completion block handler returning @response@ (@NSObject@ if JSON, otherwise @NSData@), @NSHTTPURLResponse@ and @NSError@ objects.
* persistent @basePath@ and basic authentication signing when using @SVHTTPClient@.
* support for @multipart/form-data@ parameters in POST and PUT requests.
* talks with the network activity indicator (iOS only).

h2. Installation

* Drag the @SVHTTPRequest/SVHTTPRequest@ folder into your project. 
* @#import "SVHTTPRequest.h"@ (this will import @SVHTTPClient@ as well)

h2. Usage

(see sample Xcode project in @/Demo@)

The easiest way to make a request is using the @SVHTTPRequest@ convenience methods:

<pre>
[SVHTTPRequest GET:@"http://github.com/api/v2/json/repos/show/samvermette/SVHTTPRequest"
        parameters:nil
        completion:^(id response, NSHTTPURLResponse *urlResponse, NSError *error) {
            NSLog(@"SVHTTPRequest has %@ watchers", [[response valueForKey:@"repository"] valueForKey:@"watchers"]];
        }];
</pre>

If most of your requests are made to the same API endpoint, you should instead use @SVHTTPClient@ so you can set parameters (@basePath@, @cachePolicy@, @sendParametersAsJSON@, @"userAgent@) that will be used for each request:

<pre>
[[SVHTTPClient sharedClient] setBasePath:@"http://api.twitter.com/1/"];

[[SVHTTPClient sharedClient] GET:@"users/show.json"
                      parameters:[NSDictionary dictionaryWithObject:@"samvermette" forKey:@"screen_name"]
                      completion:^(id response, NSHTTPURLResponse *urlResponse, NSError *error) {
                          followersLabel.text = [NSString stringWithFormat:@"@samvermette has %@ followers", [response valueForKey:@"followers_count"]];
                      }];
</pre> 

If you would like to set those properties on individual requests, you'll need to alloc/init the request, set the attributes, and then call @start@:

<pre>
SVHTTPRequest *request = [[SVHTTPRequest alloc] initWithAddress:@"http://github.com/api/v2/json/repos/show/samvermette/SVHTTPRequest"
                                                         method:SVHTTPRequestMethodGET 
                                                     parameters:nil 
                                                     completion:^(id response, NSHTTPURLResponse *urlResponse, NSError *error) {
                                                         watchersLabel.text = [NSString stringWithFormat:@"SVHTTPRequest has %@ watchers", [[response valueForKey:@"repository"] valueForKey:@"watchers"]];
                                                     }];
request.cachePolicy = NSURLRequestReloadIgnoringLocalCacheData;
[request start];
</pre>


h3. Making a download request

You can tell SVHTTPRequest to save a GET response directly to disk and track the progress along the way:

<pre>
[SVHTTPRequest GET:@"http://example.com/db.sqlite.zip" 
        parameters:nil 
        saveToPath:[[NSHomeDirectory() stringByAppendingPathComponent:@"Documents"] stringByAppendingPathComponent:@"store.zip"]
          progress:^(float progress) {
              progressLabel.text = [NSString stringWithFormat:@"Downloading (%.0f%%)", progress*100];
          } 
        completion:^(id response, NSHTTPURLResponse *urlResponse, NSError *error) {
            progressLabel.text = @"Download complete";
            // process file
        }];
</pre>
                        
h3. Cancelling requests

Make sure you cancel requests for which the user isn't waiting on anymore:

<pre>
SVHTTPRequest *request = [SVHTTPRequest GET:@"http://api.twitter.com/1/users/show.json"
                                 parameters:[NSDictionary dictionaryWithObject:@"samvermette" forKey:@"screen_name"]
                                 completion:^(id response, NSHTTPURLResponse *urlResponse, NSError *error) {
                                     NSLog(@"%@", response);
                                 }];
   
[request cancel];
</pre>

If you're using SVHTTPClient, you can do that by calling @cancelRequestsWithPath:@ or @cancelAllRequests@.

h3. Disabling logging

By default, SVHTTPRequest will log messages to the console every time a request is made. You can disable this by adding the compiler flag @-DSVHTTPREQUEST_DISABLE_LOGGING@ to SVHTTPRequest.m in Target Settings > Build Phases.

h2. Under the hood

All SVHTTPRequest requests are made asynchronously using NSURLConnection's built-in asynchronous methods. The completion block, however, is executed on the main thread. You should dispatch it to a separate thread/queue if it's resource intensive enough that it hogs the main thread. This can be done easily using "Grand Central Dispatch":http://developer.apple.com/library/mac/#documentation/Performance/Reference/GCD_libdispatch_Ref/Reference/reference.html:

<pre>
completion:^(id response, NSHTTPURLResponse *urlResponse, NSError *error) {
    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_HIGH, 0), ^{
        // cpu-intensive code
    });
}];
</pre>

h2. Credits

SVHTTPRequest is brought to you by "Sam Vermette":http://samvermette.com and "contributors to the project":https://github.com/samvermette/SVHTTPRequest/contributors. If you have feature suggestions or bug reports, feel free to help out by sending pull requests or by "creating new issues":https://github.com/samvermette/SVHTTPRequest/issues/new. If you're using SVHTTPRequest in your project, attribution would be nice.