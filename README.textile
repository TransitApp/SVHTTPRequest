__If you're upgrading from an earlier version of SVHTTPRequest, please see the transition notes at the bottom of this document.__

h1. SVHTTPRequest

SVHTTPRequest is a simple and extremely straightforward way to communicate with RESTful web APIs. It's a simpler and cleaner alternative to bulky "ASIHTTPRequest":https://github.com/pokeb/asi-http-request/tree, "AFNetworking":https://github.com/AFNetworking/AFNetworking and "RESTKit":https://github.com/RestKit/RestKit. It is blocked-based, uses NSURLConnection as well as the blazing fast "JSONKit":https://github.com/johnezang/JSONKit (included in package) to automatically parse JSON responses.

**SVHTTPRequest features:**

* straightforward singleton convenience methods for making GET, POST, PUT and DELETE requests.
* completion block handler (returns @NSObject@ if response is JSON, otherwise @NSData@ or @NSError@)
* persistent @basePath@ and basic authentication signing when using @SVHTTPClient@.
* support for @multipart/form-data@ parameters in POST and PUT requests.
* talks with @setNetworkActivityIndicatorVisible@

h2. Installation

* Drag the @SVHTTPRequest/SVHTTPRequest@ folder into your project. 
* @#import "SVHTTPRequest.h"@ (this will import @SVHTTPClient@ as well)

h2. Usage

(see sample Xcode project in @/Demo@)

SVHTTPRequest was designed to be the most straightforward possible:

<pre>
[SVHTTPRequest GET:@"http://github.com/api/v2/json/repos/show/samvermette/SVHTTPRequest"
        parameters:nil
        completion:^(id response, NSError *error) {
            NSLog(@"SVHTTPRequest has %@ watchers", [[response valueForKey:@"repository"] valueForKey:@"watchers"]];
        }];
</pre>

You can replace @GET@ with @POST@, @PUT@ or @DELETE@.

h3. Using a shared client

If most of your requests are made to the same API endpoint, you can use @SVHTTPClient@ and set its @basePath@ parameter:

<pre>
[[SVHTTPClient sharedClient] setBasePath:@"http://api.twitter.com/1/"];

[[SVHTTPClient sharedClient] GET:@"users/profile_image"
                      parameters:[NSDictionary dictionaryWithObjectsAndKeys:
                                  @"samvermette", @"screen_name",
                                  @"original", @"size",
                                  nil]
                      completion:^(id response, NSError *error) {
                          twitterImageView.image = [UIImage imageWithData:response];
                      }];

[[SVHTTPClient sharedClient] GET:@"users/show.json"
                      parameters:[NSDictionary dictionaryWithObject:@"samvermette" forKey:@"screen_name"]
                      completion:^(id response, NSError *error) {
                          followersLabel.text = [NSString stringWithFormat:@"@samvermette has %@ followers", [response valueForKey:@"followers_count"]];
                      }];
</pre> 

SVHTTPClient also allows you to sign all requests using "basic authentication":http://en.wikipedia.org/wiki/Basic_access_authentication with @setBasicAuthWithUsername:password:@.

h3. Saving a GET response to disk

You can tell SVHTTPRequest to save a GET response directly to disk (to avoid filling up your memory with it):

<pre>
[SVHTTPRequest GET:@"http://example.com/db.sqlite.zip" 
        parameters:nil 
        saveToPath:[[NSHomeDirectory() stringByAppendingPathComponent:@"Documents"] stringByAppendingPathComponent:@"store.zip"]
        completion:^(id response, NSError *error) {
            // process file
        }];
</pre>

h3. Saving a GET response to disk with progress

You can ask SVHTTPRequest to give you intermediate progress value while saving a file to disk:

<pre>
[SVHTTPRequest GET:@"http://example.com/download.zip" 
        parameters:nil saveToPath:@"/Volumes/Data/test.zip" 
          progress:^(float progress) {
              progressLabel.text = [NSString stringWithFormat:@"Downloading... %.2f%", progress*100];
          } 
        completion:^(id response, NSError *error) {
            progressLabel.text = @"Download complete.";
        }];
</pre>
                        
h3. Cancelling requests

Make sure you cancel requests for which the user isn't waiting on anymore:

<pre>
SVHTTPRequest *request = [SVHTTPRequest GET:@"http://api.twitter.com/1/users/show.json"
                                 parameters:[NSDictionary dictionaryWithObject:@"samvermette" forKey:@"screen_name"]
                                 completion:^(NSObject *response) {
                                     NSLog(@"%@", response);
                                 }];
   
[request cancel];
</pre>

If you're using SVHTTPClient, you can do that by calling @cancelAllRequests@.

h2. Under the hood

All SVHTTPRequest requests are made asynchronously using NSURLConnection's built-in asynchronous methods. The completion block, however, is executed on the main thread. You should dispatch it to a separate thread/queue if it's resource intensive enough that it hogs the main thread. This can be done easily using "Grand Central Dispatch":http://developer.apple.com/library/mac/#documentation/Performance/Reference/GCD_libdispatch_Ref/Reference/reference.html:

<pre>
completion:^(NSObject *response) {
    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_HIGH, 0), ^{
        // cpu-intensive code
    });
}];
</pre>

h2. Transition notes

If you've been using SVHTTPRequest since before Dec 15, upgrading to this version will give you errors at compile time (old design sucked too bad for me to add deprecation notices). Here's what changed so you can more easily migrate to this new awesome version:

* the completion block definition changed from @^(NSObject *response)@ to @^(id response, NSError *error)@
* the basic auth signing stuff has moved from @SVHTTPRequest@ to @SVHTTPClient@.

h2. Automatic Reference Counting (ARC) support

Maintaining an official ARC branch has proven to be too much work, often leading to confusion since the ARC branch is always a few commits behind. If you'd like to use SVHTTPRequest in your ARC-enabled project, you'll have to "add the @-fno-objc-arc@ compiler flag":http://stackoverflow.com/questions/6646052/how-can-i-disable-arc-for-a-single-file-in-a-project to all of SVHTTPRequest's files.

h2. Credits

SVHTTPRequest is brought to you by "Sam Vermette":http://samvermette.com and "contributors to the project":https://github.com/samvermette/SVHTTPRequest/contributors. If you have feature suggestions or bug reports, feel free to help out by sending pull requests or by "creating new issues":https://github.com/samvermette/SVHTTPRequest/issues/new. If you're using SVHTTPRequest in your project, attribution would be nice.